map $http_upgrade $connection_upgrade {
  'websocket' upgrade;
  default close;
}

server {
  listen 80;
  server_name localhost;

  client_max_body_size 1000M;

  #add_header Access-Control-Allow-Origin "*";
  #add_header Access-Control-Allow-Methods "PUT, GET, POST, DELETE, OPTIONS";
  #add_header Access-Control-Allow-Headers "Origin, Accept, Content-Type, X-Requested-With, X-CSRF-Token";

  #error_log /var/log/nginx/error.log warn;
  #error_log /var/log/nginx/debug.error.log debug;
  #access_log /var/log/nginx/access.log;

  location / {

    #location /config.json {
    #  rewrite ^/config.json$ /config_https.json;
    #}

    location /api/ {
      #proxy_set_header            Host $host;
      #proxy_set_header            X-Real-IP $remote_addr;
      #proxy_http_version          1.1;
      #proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
      #proxy_set_header            X-Forwarded-Proto http;
      #proxy_redirect              http:// $scheme://;

      proxy_cache off;

      add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
      expires off;

      # proxy_pass http://api:80/;
      set $target http://api:80;
      rewrite /api/(.*)$ /$1 break;
      resolver 127.0.0.11; # docker resolver
      proxy_pass $target$uri$is_args$args;
    }

    # alias /webroot/;
    root /webroot;
    # index index.html;

    #add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
    #expires off;
  }
}
